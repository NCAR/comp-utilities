#!/usr/bin/env python

import argparse
import os
import re

LEVELS = ['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
LOG_DIR = '/hao/acos/comp/logs'


def main():
    parser = argparse.ArgumentParser(description='Display/filter CoMP log file')
    parser.add_argument('logfile', help='CoMP log filename or date')
    parser.add_argument('-l', '--level',
                        help='filter level: DEBUG INFO WARN ERROR CRITICAL (default DEBUG)')
    parser.add_argument('-d', '--debug', help='DEBUG filter level', action='store_true')
    parser.add_argument('-i', '--info', help='INFO filter level', action='store_true')
    parser.add_argument('-w', '--warn', help='WARN filter level', action='store_true')
    parser.add_argument('-e', '--error', help='ERROR filter level', action='store_true')
    parser.add_argument('-c', '--critical', help='CRITICAL filter level', action='store_true')
    args = parser.parse_args()

    logfile = args.logfile if args.logfile.endswith('.log') else os.path.join(LOG_DIR, args.logfile + '.log')

    # default is to not filter
    if args.level:
        level = args.level.upper()
    elif args.critical:
        level = 'CRITICAL'
    elif args.error:
        level = 'ERROR'
    elif args.warn:
        level = 'WARN'
    elif args.info:
        level = 'INFO'
    else:
        level = 'DEBUG'

    try:
        level_index = LEVELS.index(level)
    except ValueError:
        print('invalid level: %s' % level)
        parser.print_help()
        return

    level_filter = '|'.join(LEVELS[level_index:])
    pattern = '.*(%s):.*' % level_filter
    prog = re.compile(pattern)

    try:
        with open(logfile, 'r') as f:
            for line in f.read().split('\n'):
                if prog.match(line):
                    try:
                        print(line)
                    except (IOError, KeyboardInterrupt):
                        return
    except IOError:
        print('Problem reading %s' % logfile)


if __name__ == '__main__':
    main()
